// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccountProvider {
  GOOGLE
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  firstName       String
  lastName        String
  email           String           @unique
  emailVerified   DateTime?
  password        String?
  avatar          String?
  accountProvider AccountProvider?
  accounts        Account[]
  sessions        Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dreams          Dream[]
  dreamTags       DreamTag[]
  dreamCharacters DreamCharacter[]

  UserProfile UserProfile?

  friends            User[]          @relation("UserFriends")
  // This fields only exists to satisfy prisma's relationship requiremnts.
  friendsOf          User[]          @relation("UserFriends")
  sentFriendRequests FriendRequest[] @relation(name: "SentFriendRequests")
  friendRequests     FriendRequest[] @relation(name: "ReceivedFriendRequests")
}

model FriendRequest {
  id String @id @default(cuid())

  senderId String
  sender   User   @relation(name: "SentFriendRequests", fields: [senderId], references: [id])

  reveiverId String
  receiver   User   @relation(name: "ReceivedFriendRequests", fields: [reveiverId], references: [id])

  createdAt DateTime @default(now())
}

model UserProfile {
  id  String  @id @default(cuid())
  bio String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Dream {
  id          String           @id @default(cuid())
  title       String           @db.VarChar(500)
  description String           @db.VarChar(5000)
  comments    String?          @db.VarChar(1000)
  tags        DreamTag[]
  characters  DreamCharacter[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model DreamTag {
  id     String  @id @default(cuid())
  tag    String  @db.VarChar(64)
  dreams Dream[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DreamCharacter {
  id     String  @id @default(cuid())
  name   String  @db.VarChar(256)
  dreams Dream[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
